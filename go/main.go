package main

import (
	"encoding/hex"
	"encoding/json"
	"errors"
	"log"
	"math/big"
	"reflect"

	"github.com/btcsuite/btcd/btcutil"
	"github.com/btcsuite/btcd/chaincfg"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/crypto"
)

func ConvertBytesToHex(v reflect.Value) interface{} {
	if !v.IsValid() {
		return nil
	}

	// Add special handling for big.Int
	if v.Type().String() == "*big.Int" {
		if v.IsNil() {
			return nil
		}
		if bigInt, ok := v.Interface().(*big.Int); ok {
			return bigInt.String()
		}
	}

	switch v.Kind() {
	case reflect.Ptr:
		if v.IsNil() {
			return nil
		}
		return ConvertBytesToHex(v.Elem())
	case reflect.Interface:
		if v.IsNil() {
			return nil
		}
		return ConvertBytesToHex(v.Elem())
	case reflect.Slice, reflect.Array:
		if v.Type().Elem().Kind() == reflect.Uint8 {
			bytes := make([]byte, v.Len())
			for i := 0; i < v.Len(); i++ {
				bytes[i] = byte(v.Index(i).Uint())
			}
			switch v.Len() {
			case 32: // Handle Hash (32 bytes)
				hash := common.BytesToHash(bytes)
				return hash.Hex()
			case 20: // Handle Address (20 bytes)
				addr := common.BytesToAddress(bytes)
				return addr.Hex()
			default:
				return hexutil.Encode(bytes)
			}
		}
		// Handle other slices/arrays
		newSlice := make([]interface{}, v.Len())
		for i := 0; i < v.Len(); i++ {
			newSlice[i] = ConvertBytesToHex(v.Index(i))
		}
		return newSlice
	case reflect.Map:
		newMap := make(map[string]interface{})
		iter := v.MapRange()
		for iter.Next() {
			newMap[iter.Key().String()] = ConvertBytesToHex(iter.Value())
		}
		return newMap
	case reflect.Struct:
		newMap := make(map[string]interface{})
		t := v.Type()
		for i := 0; i < v.NumField(); i++ {
			field := t.Field(i)
			// Log the field name and whether it's exported
			if !field.IsExported() {
				log.Printf("Unexported field found in struct %s: %s", t.Name(), field.Name)
			}

			// Only process exported fields
			if field.IsExported() {
				fieldValue := v.Field(i)
				if fieldValue.CanInterface() {
					newMap[field.Name] = ConvertBytesToHex(fieldValue)
				} else {
					log.Printf("Cannot interface field %s in struct %s", field.Name, t.Name())
					newMap[field.Name] = "<unexported>"
				}
			}
		}
		return newMap
	default:
		// Only return the interface if we can
		if v.CanInterface() {
			return v.Interface()
		}
		return "<unexported>"
	}
}

func testDecodeAuth(auth []byte, sender common.Address, recipient btcutil.Address, kernelResponse []byte) error {
	log.Printf("test decoding auth")

	signatureTokenType, _ := abi.NewType("bytes", "", nil)
	nonceType, _ := abi.NewType("bytes32", "", nil)

	authArgs := abi.Arguments{
		{Type: signatureTokenType},
		{Type: nonceType},
	}

	unpacked, err := authArgs.Unpack(auth)
	if err != nil {
		log.Printf("Error unpacking auth: %v", err)
		return err
	}

	signatureToken, nonce := unpacked[0], unpacked[1]
	signatureTokenBytes, ok := signatureToken.([]byte)
	if !ok {
		return errors.New("signature token is not a byte array")
	}

	// Convert nonce to bytes32
	var nonceBytes [32]byte
	nonceArray, ok := nonce.([32]byte)
	if !ok {
		return errors.New("nonce is not a byte array")
	}
	copy(nonceBytes[:], nonceArray[:])

	log.Printf("sender: %s", sender.String())
	log.Printf("recipient: %s", recipient.String())
	log.Printf("nonce: %s", common.BytesToHash(nonceBytes[:]).Hex())
	log.Printf("kernelResponse: 0x%s", hex.EncodeToString(kernelResponse))
	log.Printf("signatureToken: 0x%s", hex.EncodeToString(signatureTokenBytes))

	log.Printf("recipient script address: 0x%s", hex.EncodeToString(recipient.ScriptAddress()))

	// Recreate data digest that was signed
	kernelResponsesDigest := crypto.Keccak256Hash(kernelResponse)
	dataDigest := crypto.Keccak256(common.BytesToHash(nonceBytes[:]).Bytes(), sender.Bytes(), recipient.ScriptAddress(), kernelResponsesDigest.Bytes())

	// Recover public key from signature
	pubKeyBytes, err := crypto.Ecrecover(dataDigest, signatureTokenBytes)
	if err != nil {
		log.Printf("Error recovering public key: %v", err)
		return err
	}

	// Convert to public key
	pubKey, err := crypto.UnmarshalPubkey(pubKeyBytes)
	if err != nil {
		log.Printf("Error unmarshaling public key: %v", err)
		return err
	}

	// Get address from public key
	recoveredAddr := crypto.PubkeyToAddress(*pubKey)

	// Compare with address from sender
	log.Printf("recoveredAddr: %s", recoveredAddr.String())
	log.Printf("sender: %s", sender.String())

	if recoveredAddr == sender {
		log.Printf("signature verification successful")
	} else {
		log.Printf("signature verification failed")
		return errors.New("signature verification failed")
	}

	kernelRespType, err := abi.NewType("tuple", "", []abi.ArgumentMarshaling{
		{Name: "price", Type: "string"},
		{Name: "transaction", Type: "tuple", Components: []abi.ArgumentMarshaling{
			{Name: "verified", Type: "bool"},
			{Name: "receipt", Type: "tuple", Components: []abi.ArgumentMarshaling{
				{Name: "from", Type: "address"},
				{Name: "to", Type: "address"},
				{Name: "status", Type: "uint8"},
				{Name: "blockHash", Type: "bytes32"},
				{Name: "blockNumber", Type: "uint64"},
				{Name: "transactionHash", Type: "bytes32"},
				{Name: "transactionIndex", Type: "uint64"},
				{Name: "gasUsed", Type: "uint64"},
				{Name: "cumulativeGasUsed", Type: "uint64"},
				{Name: "effectiveGasPrice", Type: "uint64"},
				// {Name: "logsBloom", Type: "bytes"},
				{Name: "type", Type: "uint8"},
				{Name: "root", Type: "bytes32"},
				{Name: "logs", Type: "tuple[]", Components: []abi.ArgumentMarshaling{
					{Name: "address", Type: "address"},
					{Name: "topics", Type: "bytes32[]"},
					{Name: "data", Type: "bytes"},
					{Name: "blockNumber", Type: "uint64"},
					{Name: "transactionHash", Type: "bytes32"},
					{Name: "transactionIndex", Type: "uint64"},
					{Name: "blockHash", Type: "bytes32"},
					{Name: "logIndex", Type: "uint64"},
					{Name: "removed", Type: "bool"},
				}},
			}},
		}},
		{Name: "premium", Type: "string"},
		{Name: "liquidity", Type: "tuple", Components: []abi.ArgumentMarshaling{
			{Name: "balance", Type: "string"},
			{Name: "total_input_amount", Type: "string"},
			{Name: "required_amount", Type: "string"},
			{Name: "change_amount", Type: "string"},
			{Name: "estimated_fee", Type: "string"},
			{Name: "actual_fee", Type: "string"},
			{Name: "sufficient", Type: "bool"},
			{Name: "utxos", Type: "tuple[]", Components: []abi.ArgumentMarshaling{
				{Name: "txid", Type: "string"},
				{Name: "vout", Type: "uint64"},
				{Name: "status", Type: "tuple", Components: []abi.ArgumentMarshaling{
					{Name: "confirmed", Type: "bool"},
					{Name: "block_hash", Type: "string"},
					{Name: "block_height", Type: "uint64"},
					{Name: "block_time", Type: "uint64"},
				}},
				{Name: "value", Type: "uint256"},
			}},
			{Name: "fees", Type: "tuple", Components: []abi.ArgumentMarshaling{
				{Name: "fastestFee", Type: "uint64"},
				{Name: "halfHourFee", Type: "uint64"},
				{Name: "hourFee", Type: "uint64"},
				{Name: "economyFee", Type: "uint64"},
				{Name: "minimumFee", Type: "uint64"},
			}},
			{Name: "input_utxos", Type: "tuple[]", Components: []abi.ArgumentMarshaling{
				{Name: "txid", Type: "string"},
				{Name: "vout", Type: "uint64"},
				{Name: "value", Type: "uint256"},
				{Name: "script_pubkey", Type: "string"},
			}},
			{Name: "output_utxos", Type: "tuple[]", Components: []abi.ArgumentMarshaling{
				{Name: "txid", Type: "string"},
				{Name: "vout", Type: "uint64"},
				{Name: "value", Type: "uint256"},
				{Name: "script_pubkey", Type: "string"},
			}},
			{Name: "lp_pubkey", Type: "string"},
		}},
	})
	if err != nil {
		log.Printf("Error creating kernel response type: %v", err)
		return err
	}

	kernelRespArgs := abi.Arguments{
		{Type: kernelRespType, Name: "kernelResp"},
	}

	unpacked, err = kernelRespArgs.Unpack(kernelResponse)
	if err != nil {
		log.Printf("Error unpacking kernel response: %v", err)
		return err
	}

	prettyUnpacked := ConvertBytesToHex(reflect.ValueOf(&unpacked))

	prettyJSON, err := json.MarshalIndent(prettyUnpacked, "", "    ")
	if err != nil {
		log.Printf("Error marshaling kernel response: %v", err)
		return err
	}
	log.Printf("Decoded kernel response:\n%s", string(prettyJSON))

	return nil
}

func main() {
	auth := common.FromHex("0x0000000000000000000000000000000000000000000000000000000000000040a5e14fba86592759a836757c2a09c43cf3e85e98bb47d4d74ea47017d50c884c0000000000000000000000000000000000000000000000000000000000000041c1e2ae4c77b84e1c518cac9df66ee84e8f640a4a12f634f546c7b0cd24dd14456db346d952b3896867e71f2ae963f5496e98b327882e28a918963648dae73e2c0000000000000000000000000000000000000000000000000000000000000000")
	kernelResponse := common.FromHex("")
	sender := common.HexToAddress("0x889E6a9d863373A7A735AB71Cd481e63ef8d64A4")
	recipient, _ := btcutil.NewAddressPubKey(common.FromHex("0267ec0b1f94cea5a22511f0925e27fd7de087dfe13d4abe243ded4c94b1573ff0"), &chaincfg.TestNet4Params)

	err := testDecodeAuth(auth, sender, recipient, kernelResponse)
	if err != nil {
		log.Fatalf("Error: %v", err)
	} else {
		log.Println("testDecodeAuth executed successfully")
	}
}
